---
title: "Homework Assignment #3"
subtitle: "Prioritizing potential aquaculture"
author: "Liz Peterson"
date: 11.30.24
warning: false
error: false
editor_options: 
  chunk_output_type: console
---

```{r}
library(terra)
library(here)
library(sf)
library(raster)
library(stars)
library(tmap)
library(tidyverse)
```

### Prepare data
```{r}
# Read in West Coast Exclusive Economic Zones shapefile
wc_eez <- st_read(here('data/wc_regions_clean.shp'))

# Read in bathymetry raster
depth <- rast(here('data/depth.tif'))

# Read in annual average sea surface temperature rasters from 2008-2012
sst_2008 <- rast(here('data/average_annual_sst_2008.tif'))
sst_2009 <- rast(here('data/average_annual_sst_2009.tif'))
sst_2010 <- rast(here('data/average_annual_sst_2010.tif'))
sst_2011 <- rast(here('data/average_annual_sst_2011.tif'))
sst_2012 <- rast(here('data/average_annual_sst_2012.tif'))
```

```{r}
# Combine SST rasters
sst_all <- c(sst_2008, sst_2009, sst_2010, sst_2011, sst_2012)
```

```{r}
# Make sure all data sets have the same CRS - using sst_all as a reference
# First, check depth and sst_stack CRS
if(crs(depth) == crs(sst_all)) {
  print('Coordinate reference systems match.')
} else{
  warning('CRS dont match')
  depth <- project(depth, crs(sst_all), method = "bilinear")
  print('CRS now match.')
}
```


### Process data
```{r}
# Find mean SST from 2008-2012
mean_sst <- mean(sst_all, na.rm = TRUE)

# Convert mean SST to Celcius from Kelvins
mean_sst <- mean_sst - 273.15
```

```{r}
# Check mean_sst
plot(mean_sst, main = "Mean SST")
```


```{r}
# Crop the depth raster to match the extent of the sst raster
depth_cropped <- crop(depth, mean_sst)

# Resample the depth data to match the resolution of the sst raster (using the nearest neighbor approach)
depth_resampled <- resample(depth_cropped, mean_sst, method = "ngb")
```

```{r}
# Check depth raster after resampling
plot(depth_resampled, main = "Bathymetry")
```

```{r}
# Check that depth and sst match in resolution, extent, and CRS

# CRS matching
if ((crs(depth) == crs(sst_all))) {
  print("CRSs match!")
} else {
  depth <- projectRaster(depth, crs = crs(sst_all))
}

# Extent matching
if (ext(depth) == ext(sst_all)) {
  print("Extents match!")
} else {
  depth <- extend(depth, ext(sst_all))
}

# Resolution matching
if (identical(res(depth), res(sst_all))) {
  print("Resolutions match!")
} else {
  depth <- resample(depth, sst_all, method = "bilinear")
}
```

### Find suitable locations
```{r}
# Reclassify sst and depth into locations that are suitable for oysters
# set suitable values to 1 and unsuitable values to 0

# For sst, suitable values are between 11-30 (degrees celsius)
sst_rcl <- matrix(c(-Inf, 11, 0,
                    11, 30, 1, 
                    30, Inf, 0),
                  ncol = 3, byrow = TRUE)

# For depth, suitable values are between 0-70 (meters below sea level)
depth_rcl <- matrix(c(-Inf, -70, 0,
                    -70, 0, 1,
                    0, Inf, 0),
                    ncol = 3, byrow = TRUE)

# Reclassify raster by sst
reclass_sst <- classify(sst_all[[1]], rcl = sst_rcl, include.lowest=TRUE)

# Reclassify raster by depth
reclass_depth <- classify(sst_all[[2]], rcl = depth_rcl, include.lowest=TRUE)

# Multiply reclassified rasters together to make sure both suitability conditions are true 
reclass_sst_depth <- reclass_depth * reclass_sst


# Plot reclassified raster
plot(reclass_sst_depth, main = "Suitable locations for oysters")
```

### Determine the most suitable EEZ
```{r}
# Rasterize eez data and then find where that data is suitable 
if(crs(wc_eez) == crs(reclass_sst_depth)) {
  print('Coordinate reference systems match')
} else{
  warning('CRS dont match')
  wc_eez <- st_transform(wc_eez, crs(reclass_sst_depth))
  print('CRS now match.')
}

# Create optimal location mask by finding area of covered raster cells
optimal_mask <- cellSize(reclass_sst_depth, mask=TRUE,unit='km', transform=TRUE)

plot(optimal_mask)

# Use rgn_id to identify the 5 different EEZ regions
eez_raster <- rasterize(wc_eez, optimal_mask, field = "rgn_id")

# Preliminary plot to make sure rasterization worked
plot(eez_raster)
```

```{r}
# Find the area in each region with optimal conditions
suitable_eez <- zonal(optimal_mask, eez_raster, fun = "sum", na.rm = TRUE)
  
# join the suitable eez zones with our west coast eez data
eez_area <- left_join(wc_eez, suitable_eez, by = 'rgn_id')  
```

```{r}
# Combined plot of suitable EEZ and depth data
ggplot(eez_area) +
  geom_sf(aes(fill = area)) +
  theme(panel.grid.major=element_blank()) +
  labs(title = "Total area suitable for oysters",
       x = "Longitutde",
       y = "Latitude")
```

```{r}
# Generalize workflow in a function
# Create a function with inputs specified in assignments 
suitable_function <- function(min_temp, max_temp, min_depth, max_depth, species_name) {
  # Reclassify the depth based on depth arguments
  depth_rcl <- matrix(c(-Inf, -max_depth, NA,
                           -max_depth, -min_depth, 1,
                           -min_depth, Inf, NA),
                         ncol = 3, byrow = TRUE) 
  
   
  # Reclassify the temperature matrix based on arguments for temp
  temp_rcl <- matrix(c(-Inf, min_temp, NA,
                           min_temp, max_temp, 1,
                           max_temp, Inf, NA),
                         ncol = 3, byrow = TRUE) 

# Reclassify using the rcl matrices
depth <- classify(depth_resampled, rcl = depth_rcl,  include.lowest = TRUE)
sst <-  classify(mean_sst, rcl = temp_rcl,  include.lowest = TRUE)

total_rcl <- sst * depth

# Create optimal location mask by finding area of covered raster cells
optimal_mask <- cellSize(x = total_rcl,
                              unit = 'km',
                              transform = TRUE)
  
# Rasterize the eez with the optimal mask made above
eez_rasterized <- rasterize(x = wc_eez,
                        y = optimal_mask,
                        field = 'rgn',
                        na.rm = TRUE)
  
# Total within our zones
zones <- zonal(x = optimal_mask,
                 z = eez_rasterized,
                 fun = "sum",
                 na.rm = TRUE)
# Join both 
suitable_area <- left_join(wc_eez, zones, by = join_by(rgn))
  
# Plot the suitable area --> make sure to put species name in plot title

species_name_print <- paste("Total area suitable for", species_name)

ggplot(suitable_area, aes(fill = area_km2)) +
  geom_sf() +
   labs(title = species_name_print,
        x = 'Longitude',
        y= 'Latitude')
}
```

Sources:

1. Hall, S. J., Delaporte, A., Phillips, M. J., Beveridge, M. & O’Keefe, M. Blue Frontiers: Managing the Environmental Costs of Aquaculture (The WorldFish Center, Penang, Malaysia, 2011).↩︎
2. Gentry, R. R., Froehlich, H. E., Grimm, D., Kareiva, P., Parke, M., Rust, M., Gaines, S. D., & Halpern, B. S. Mapping the global potential for marine aquaculture. Nature Ecology & Evolution, 1, 1317-1324 (2017).↩︎
3. GEBCO Compilation Group (2022) GEBCO_2022 Grid (doi:10.5285/e0f0bb80-ab44-2739-e053-6c86abc0289c).↩︎
4. NOAA Coral Reef Watch. 5km Sea Surface Temperature Anomaly (SSTA). National Oceanic and Atmospheric Administration. Retrieved November 15, 2024, from https://coralreefwatch.noaa.gov/product/5km/index_5km_ssta.php
5. GEBCO. GEBCO gridded bathymetry data. The GEBCO Digital Atlas. Retrieved November 15, 2024, from https://www.gebco.net/data_and_products/gridded_bathymetry_data/#area
6. MarineRegions.org. EEZ data. Retrieved November 15, 2024, from https://www.marineregions.org/eez.php
